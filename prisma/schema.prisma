// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int      @id @default(autoincrement())
  username  String?  @unique
  email     String?   @unique
  phone     String?   @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  github_id   Int? @unique
  kakao_id  BigInt? @unique
  google_id  String? @unique
  naver_id  String? @unique
  avatarUrl  String?
  tokens SMSToken[]
  posts Post[]
  comments Comment[]
  likes Like[]  
  follows Follow[]
  memos Memo[]
}

model SMSToken {
  id        Int      @id @default(autoincrement())
  token     String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  user User @relation(fields: [userId], references: [id])
}


model Post {
  id        Int      @id @default(autoincrement())
  things      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  user User @relation(fields: [userId], references: [id])
  comments Comment[]
  likes Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  user User @relation(fields: [userId], references: [id])
  postId Int
  post Post @relation(fields: [postId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  user User @relation(fields: [userId], references: [id])
  postId Int
  post Post @relation(fields: [postId], references: [id])
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  user User @relation(fields: [userId], references: [id])
}

model Memo {
  id        Int      @id @default(autoincrement())
  memo     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  user User @relation(fields: [userId], references: [id])
}